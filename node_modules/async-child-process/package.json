{
  "_args": [
    [
      {
        "raw": "async-child-process",
        "scope": null,
        "escapedName": "async-child-process",
        "name": "async-child-process",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\forBook"
    ]
  ],
  "_cnpm_publish_time": 1477609772428,
  "_from": "async-child-process",
  "_hasShrinkwrap": false,
  "_id": "async-child-process@1.1.1",
  "_location": "/async-child-process",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/async-child-process-1.1.1.tgz_1477609770390_0.9954246757552028"
  },
  "_npmUser": {
    "name": "jedwards1211",
    "email": "jedwards@fastmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "async-child-process",
    "scope": null,
    "escapedName": "async-child-process",
    "name": "async-child-process",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/async-child-process/download/async-child-process-1.1.1.tgz",
  "_shasum": "27d0a598b5738707f9898c048bd231340583747b",
  "_shrinkwrap": null,
  "_spec": "async-child-process",
  "_where": "D:\\forBook",
  "author": {
    "name": "Andy Edwards"
  },
  "bugs": {
    "url": "https://github.com/jedwards1211/async-child-process/issues"
  },
  "config": {
    "mocha": "--compilers js:babel-core/register ./test/*.js"
  },
  "dependencies": {
    "babel-runtime": "^6.11.6"
  },
  "description": "Promise-based child process interface",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-eslint": "^7.0.0",
    "babel-plugin-istanbul": "^2.0.1",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-flow": "^1.0.0",
    "babel-preset-stage-1": "^6.16.0",
    "babel-register": "^6.16.3",
    "chai": "^3.5.0",
    "coveralls": "^2.11.14",
    "es6-promisify": "^5.0.0",
    "eslint": "^3.7.0",
    "eslint-config-andy": "github:jedwards1211/eslint-config-andy#2.0.0-beta7",
    "eslint-watch": "^2.1.14",
    "flow-bin": "^0.33.0",
    "flow-watch": "^1.0.0",
    "glob": "^7.1.1",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.0",
    "nyc": "^8.3.0",
    "rimraf": "^2.5.4"
  },
  "directories": {},
  "dist": {
    "shasum": "27d0a598b5738707f9898c048bd231340583747b",
    "size": 4893,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/async-child-process/download/async-child-process-1.1.1.tgz"
  },
  "gitHead": "417eac89a85ce2ec7076f1784d87312b1f2c1c1d",
  "homepage": "https://github.com/jedwards1211/async-child-process#readme",
  "keywords": [
    "es2015"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jedwards1211",
      "email": "jedwards@fastmail.com"
    }
  ],
  "name": "async-child-process",
  "nyc": {
    "include": [
      "src/**/*.js"
    ],
    "require": [
      "babel-register"
    ],
    "sourceMap": false,
    "instrument": false
  },
  "optionalDependencies": {},
  "publish_time": 1477609772428,
  "readme": "# async-child-process\n\n[![Build Status](https://travis-ci.org/jedwards1211/async-child-process.svg?branch=master)](https://travis-ci.org/jedwards1211/async-child-process)\n[![Coverage Status](https://coveralls.io/repos/github/jedwards1211/async-child-process/badge.svg?branch=master)](https://coveralls.io/github/jedwards1211/async-child-process?branch=master)\n\nA simple `Promise`-based API for working with `ChildProcess`es.\n\n## Usage\n\n```sh\nnpm install --save async-child-process\n```\n\n### `join(child: ChildProcess): Promise<Result>`\n\nWaits for `child` to exit.\n\nReturns a `Promise` that:\n- will resolve `{code: 0}` if `child` exits with code 0\n- with reject with an error otherwise\n  - `error.code` will be the exit code if the child exited normally\n  - `error.signal` will be the signal the child was terminated with, if any\n  - *Note:* if `child` emits an `error`, it may be the rejection reason and it may not have `code` or `signal`\n\nExample:\n\n```es6\nimport {exec} from 'child_process'\nimport {join} from 'async-child-process'\n\nasync function test() {\n  await join(exec('echo hello world'))\n}\n```\n\n### `kill(child: ChildProcess, signal?: string): Promise<void>`\n\nSends a signal to `child` and waits for it to exit.\n\nReturns a `Promise` that:\n- will resolve once `child` is killed\n- will reject with an `error` if `child` emits one\n\nExample:\n```es6\nimport {exec} from 'child_process'\nimport {kill} from 'async-child-process'\n\nasync function test() {\n  const child = exec(`node -e 'setTimeout(() => console.log(\"finally!\"), 1e11)'`)\n  await kill(child)\n}\n```\n\n### `childPrinted(child: ChildProcess, predicate: (output: string) => boolean | RegExp, stream?: 'stdout' | 'stderr'): Promise<string>`\n\nWaits for `child` to print something to its `stdout` and/or `stderr`.  Returns a promise that:\n- will resolve with the message that matched `predicate` or\n- will reject if `child` exited or errored before printing a message that matched `predicate`\n\nArguments:\n- child: the `ChildProcess` to listen to\n- predicate: `childPrinted` will wait until `child`'s stream(s) output a message matching the predicate\n- stream: which of `child`'s streams to listen to, omit to listen to both `stdout` and `stderr`\n\nExample:\n```es6\nimport {exec} from 'child_process'\nimport {childPrinted} from 'async-child-process'\n\nasync function test() {\n  const child = exec(`webpack --config webpack.config.dev.js`)\n  await childPrinted(child, /webpack built in \\d+ ms/)\n}\n```\n\n### `execAsync(command: string, options?: Object): Promise<Result>`\n\nLike `exec`, but returns a `Promise` that:\n- will resolve with `{stdout: string, stderr: string}` from running `command` if it exited with code 0\n- will reject with an error otherwise\n  - `error.code` will be the exit code if the child exited normally\n  - `error.signal` will be the signal the child was terminated with, if any\n  - *Note:* if `child` emits an `error`, it may be the rejection reason and it may not have `code` or `signal`\n\nExample:\n```es6\nimport {execAsync} from 'async-child-process'\n\nasync function test() {\n  const {stdout} = await execAsync('docker-compose port webapp 80')\n  const testUrl = stdout.trim()\n}\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jedwards1211/async-child-process.git"
  },
  "scripts": {
    "build": "rimraf lib && babel src --out-dir lib",
    "coverage": "NODE_ENV=coverage nyc --check-coverage --lines 100 --functions 100 --branches 100 --reporter=lcov --reporter=text mocha $npm_package_config_mocha",
    "flow": "flow",
    "flow:coverage": "for file in src/**.js test/**.js; do echo $file; flow coverage $file; done",
    "flow:watch": "flow-watch --ignore lib/ --ignore node_modules/ --watch .flowconfig --watch src/ --watch test/",
    "gen-flow-files": "flow gen-flow-files src/ --out-dir lib",
    "lint": "eslint src test",
    "lint:fix": "eslint --fix src test",
    "lint:watch": "esw --watch src test",
    "postpublish": "git tag -a v$npm_package_version -m v$npm_package_version && git push origin v$npm_package_version",
    "prepublish": "npm run lint && flow && npm run coverage && npm run build",
    "test": "mocha $npm_package_config_mocha"
  },
  "version": "1.1.1"
}
